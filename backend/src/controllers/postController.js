// postController.js
const Post = require("../models/Post");
const { uploadFileToFirebase } = require("../utils/firebase");

// ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
exports.getFilteredPosts = async (req, res) => {
  try {
    const { filter = "latest", campus, community } = req.query;

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° campus/community ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    let query = {};
    if (campus) query.campus = campus;
    if (community) query.community = community;

    // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° filter
    let postsQuery = Post.find(query);

    // filter ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (filter === "latest") {
      postsQuery = postsQuery.sort({ createdAt: -1 }); // ‡πÉ‡∏ä‡πâ sort ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    } else if (filter === "popular") {
      postsQuery = postsQuery.sort({ likes: -1 }); // ‡πÉ‡∏ä‡πâ sort ‡∏ï‡∏≤‡∏° likes
    } else if (filter === "starred") {
      postsQuery = postsQuery.where("starred").equals(true); // ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô starred
    } else if (filter === "personalized") {
      // ‡πÉ‡∏™‡πà logic ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á ‡πÄ‡∏ä‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à
      postsQuery = postsQuery.limit(10); // mock ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
    }

    // ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const posts = await postsQuery.exec();

    res.status(200).json(posts);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
exports.createPost = async (req, res) => {
  console.log("üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà createPost ‡πÅ‡∏•‡πâ‡∏ß");
  try {
    const { content, community, target, authorName } = req.body;
    const files = req.files;

    let imageUrls = [];
    let videoUrls = [];

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    if (files?.images) {
      imageUrls = await Promise.all(
        files.images.map(
          async (file) =>
            await uploadFileToFirebase(
              file.buffer,
              file.originalname,
              file.mimetype,
              "images"
            )
        )
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    if (files?.videos) {
      videoUrls = await Promise.all(
        files.videos.map(
          async (file) =>
            await uploadFileToFirebase(
              file.buffer,
              file.originalname,
              file.mimetype,
              "videos"
            )
        )
      );
    }

    const newPost = new Post({
      content,
      community,
      target,
      authorName,
      images,
      videos,
    });

    await newPost.save();
    res.status(201).json(newPost);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå" });
  }
};
