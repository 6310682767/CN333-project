const axios = require("axios");
const { User } = require("../models/user");

const TU_API_URL = "https://restapi.tu.ac.th/api/v1/auth/Ad/verify";

const BAD_WORDS = ["fuck", "shit", "bitch", "asshole", "bastard"];
const SPECIAL_CHAR_REGEX = /[^\w\s\u0E00-\u0E7F]/;
const THAI_CHAR_REGEX = /[\u0E00-\u0E7F]/;

// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ login ‡∏ú‡πà‡∏≤‡∏ô TU API
const loginWithTUAPI = async (req, res) => {
  const { username, password } = req.body;

  console.log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ TU API:", {
    UserName: username,
    PassWord: password,
  });

  try {
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ TU API
    const response = await axios.post(
      TU_API_URL,
      { UserName: username, PassWord: password },
      {
        headers: {
          "Content-Type": "application/json",
          "Application-Key":
            "TUc92ac9800ebb78fa4e7a8b0adbed88c29121fb7988c0a29ae3d5c6026e27fa6c510d2d6a5eceeee7fb64f2f478b94015",
        },
      }
    );

    console.log("üì¶ TU Response:", response.data);

    if (!response.data.status) {
      return res.status(400).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
    let user = await User.findOne({ username });
    console.log("üß™ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å User.findOne:", user);
    if (!user) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      console.log("üì• ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...");
      user = new User({
        username: response.data.username, // TU API ‡∏™‡πà‡∏á username ‡∏°‡∏≤
        studentNameTh: response.data.displayname_th, // TU API ‡∏™‡πà‡∏á displayName ‡∏°‡∏≤
        studentNameEn: response.data.displayname_en, // TU API ‡∏™‡πà‡∏á displayName ‡∏°‡∏≤
        displayName: "", // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô frontend
        campus: "", // ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÄ‡∏Ç‡∏ï‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô frontend
        email: response.data.email, // TU API ‡∏™‡πà‡∏á email ‡∏°‡∏≤
        department: response.data.department, // TU API ‡∏™‡πà‡∏á department ‡∏°‡∏≤
        faculty: response.data.faculty, // TU API ‡∏™‡πà‡∏á faculty ‡∏°‡∏≤
      });
      console.log("TU API Keys: ", Object.keys(response.data));
      console.log("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", user);
      try {
        await user.save();
        console.log("üì• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } catch (err) {
        console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", err.message);
      }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    res.status(200).json({ message: "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user });
  } catch (err) {
    console.error("‚ùå Login Error:", err.message);
    if (err.response) {
      console.error("üì® TU API Error Response:", err.response.data);
      return res.status(400).json({
        error: err.response.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô",
      });
    }
    const tuDescription = err.response?.data?.Description;
    res
      .status(500)
      .json({ error: tuDescription || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô" });
  }
};

module.exports = { loginWithTUAPI };

exports.setDisplayName = async (req, res) => {
  const { username, displayName } = req.body;

  if (!displayName?.trim())
    return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á" });
  if (THAI_CHAR_REGEX.test(displayName))
    return res.status(400).json({ error: "‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á" });
  if (displayName.length > 20)
    return res.status(400).json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
  if (BAD_WORDS.some((word) => displayName.toLowerCase().includes(word)))
    return res.status(400).json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û" });
  if (SPECIAL_CHAR_REGEX.test(displayName))
    return res.status(400).json({ error: "‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥" });

  const existing = await User.findOne({ displayName });
  if (existing) {
    return res.status(400).json({ error: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
  }

  const user = await User.findOneAndUpdate(
    { username },
    { displayName },
    { new: true }
  );

  if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ" });

  res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user });
};
